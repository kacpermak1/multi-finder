{"version":3,"sources":["Components/Navbar/Navbar.js","Components/ImageResults/ImageResults.js","Components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","title","ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","imageList","images","this","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","modal","onRequestCLose","close","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","name","axios","get","then","res","data","hits","catch","console","log","onAmountChange","index","onChange","floatingLabelText","fullWidth","primaryText","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAKeA,EAFA,kBAAO,kBAAC,IAAD,CAAQC,MAAM,gB,sMC4DrBC,E,2MArDXC,MAAQ,CACJC,MAAM,EACNC,WAAY,I,EAGhBC,WAAa,SAACC,GACV,EAAKC,SAAS,CAAEJ,MAAM,EAAMC,WAAYE,K,EAG5CE,YAAc,WACV,EAAKD,SAAS,CAAEJ,MAAM,K,wEAGhB,IAEFM,EAFC,OAGGC,EAAWC,KAAKC,MAAhBF,OAGJD,EADAC,EAEI,kBAACG,EAAA,SAAD,CAAUC,KAAM,GACXJ,EAAOK,KAAI,SAAAT,GAAG,OACX,kBAAC,WAAD,CAAUN,MAAOM,EAAIU,KAAMC,IAAKX,EAAIY,GAAIC,SACpC,oCAAS,+BAAQb,EAAIc,OACrBC,WAAY,kBAAC,IAAD,CAAYC,QAAS,kBAAM,EAAKjB,WAAWC,EAAIiB,iBAAgB,kBAAC,IAAD,CAAQC,MAAM,YACzF,yBAAKC,IAAKnB,EAAIiB,cAAeG,IAAKpB,EAAIU,YAM1C,KAGhB,IAAMW,EAAU,CACZ,kBAAC,IAAD,CAAYC,MAAM,QAAQC,SAAS,EAAMP,QAASX,KAAKH,eAG3D,OAAO,6BAAMC,EACT,kBAAC,IAAD,CAAQkB,QAASA,EACbG,OAAO,EACP3B,KAAMQ,KAAKT,MAAMC,KACjB4B,eAAgBpB,KAAKT,MAAM8B,OAC3B,yBAAKP,IAAKd,KAAKT,MAAME,WAAYsB,IAAI,GAAGO,MAAO,CAAEC,MAAO,gB,GA7C7CC,aC8CZC,E,2MA7CXlC,MAAQ,CACJmC,WAAY,GACZC,OAAQ,GACRC,OAAQ,0BACRC,OAAQ,qCACR9B,OAAQ,I,EAGZ+B,aAAe,SAACC,GACZ,IAAMC,EAAMD,EAAEE,OAAOC,MACrB,EAAKtC,SAAL,eAAiBmC,EAAEE,OAAOE,KAAOH,IAAO,WACxB,KAARA,EAAc,EAAKpC,SAAS,CAAEG,OAAQ,KAEtCqC,IAAMC,IAAN,UAAa,EAAK9C,MAAMqC,OAAxB,iBAAuC,EAAKrC,MAAMsC,OAAlD,cAA8D,EAAKtC,MAAMmC,WAAzE,sCAAiH,EAAKnC,MAAMoC,OAA5H,qBACKW,MAAK,SAAAC,GAAG,OAAI,EAAK3C,SAAS,CAAEG,OAAQwC,EAAIC,KAAKC,UAC7CC,MAAMC,QAAQC,IAAI,Y,EAMnCC,eAAiB,SAACd,EAAGe,EAAOd,GACxB,EAAKpC,SAAS,CAAE+B,OAAQK,K,wEAKxB,OACI,6BACI,kBAAC,IAAD,CAAWG,KAAK,aAAaD,MAAOlC,KAAKT,MAAMmC,WAAYqB,SAAU/C,KAAK8B,aAAckB,kBAAkB,oBAAoBC,WAAW,IACzI,6BACA,kBAAC,IAAD,CAAad,KAAK,SAASa,kBAAkB,SAASd,MAAOlC,KAAKT,MAAMoC,OAAQoB,SAAU/C,KAAK6C,gBAC3F,kBAAC,IAAD,CAAUX,MAAO,EAAGgB,YAAY,MAChC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,OACjC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,OACjC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,OACjC,kBAAC,IAAD,CAAUhB,MAAO,GAAIgB,YAAY,QAErC,6BACClD,KAAKT,MAAMQ,OAAOoD,OAAS,EAAI,kBAAC,EAAD,CAAcpD,OAAQC,KAAKT,MAAMQ,SAAa,U,GAzCzEyB,aCQN4B,EAXH,WACV,OAEI,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCZNC,IAASC,OAAO,kBAAC,IAAD,KAAkB,kBAAC,EAAD,OAA4BC,SAASC,eAAe,SD6HhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.988c7dc1.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from 'material-ui/AppBar';\n\nconst Navbar = () =>  <AppBar title=\"Pic Finder\" />\n\nexport default Navbar;\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\n\n    state = {\n        open: false,\n        currentImg: ''\n    }\n\n    handleOpen = (img) => {\n        this.setState({ open: true, currentImg: img })\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n\n    render() {\n\n        let imageList;\n        const { images } = this.props;\n\n        if (images) {\n            imageList = (\n                <GridList cols={3}>\n                    {images.map(img => (\n                        <GridTile title={img.tags} key={img.id} subtitle={\n                            <span>by <stron>{img.user}</stron></span>}\n                            actionIcon={<IconButton onClick={() => this.handleOpen(img.largeImageURL)}><ZoomIn color=\"white\" /></IconButton>}>\n                            <img src={img.largeImageURL} alt={img.tags} />\n                        </GridTile>\n                    ))}\n                </GridList>\n            )\n        } else {\n            imageList = null\n        }\n\n        const actions = [\n            <FlatButton label=\"close\" primary={true} onClick={this.handleClose} />\n        ]\n\n        return <div>{imageList}\n            <Dialog actions={actions}\n                modal={false}\n                open={this.state.open}\n                onRequestCLose={this.state.close}>\n                <img src={this.state.currentImg} alt='' style={{ width: \"100%\" }} />\n            </Dialog>\n        </div>\n    }\n}\n\nImageResults.propTypes = {\n    images: PropTypes.array.isRequired\n}\n\nexport default ImageResults;\n","import React, { Component } from 'react';\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\nimport ImageResults from '../ImageResults/ImageResults';\n\nclass Search extends Component {\n\n    state = {\n        searchText: '',\n        amount: 15,\n        apiUrl: 'https://pixabay.com/api',\n        apiKey: '15164621-e9e63a50c846d79421bd72c77',\n        images: []\n    }\n\n    onTextChange = (e) => {\n        const val = e.target.value;\n        this.setState({ [e.target.name]: val }, () => {\n            if (val === '') { this.setState({ images: [] }) } else {\n\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n                    .then(res => this.setState({ images: res.data.hits }))\n                    .catch(console.log(\"err\"))\n            }\n        }\n        )\n    }\n\n    onAmountChange = (e, index, val) => {\n        this.setState({ amount: val })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <TextField name=\"searchText\" value={this.state.searchText} onChange={this.onTextChange} floatingLabelText=\"search for images\" fullWidth={true} />\n                <br />\n                <SelectField name=\"amount\" floatingLabelText=\"Amount\" value={this.state.amount} onChange={this.onAmountChange}>\n                    <MenuItem value={5} primaryText=\"5\" />\n                    <MenuItem value={10} primaryText=\"10\" />\n                    <MenuItem value={15} primaryText=\"15\" />\n                    <MenuItem value={20} primaryText=\"20\" />\n                    <MenuItem value={25} primaryText=\"25\" />\n                </SelectField>\n                <br />\n                {this.state.images.length > 0 ? <ImageResults images={this.state.images} /> : null}\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport Navbar from './Components/Navbar/Navbar';\nimport Search from './Components/Search/Search';\n\nconst App = () => {\n  return (\n    \n      <div>\n        <Navbar />\n        <Search />\n      </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nReactDOM.render(<MuiThemeProvider><App /></MuiThemeProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}