{"version":3,"sources":["Components/ImageResults/ImageResults.js","Components/Search/Search.js","Components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","imageList","images","this","props","GridList","cellHeight","cols","map","title","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","modal","onRequestCLose","close","style","width","Component","Search","searchText","amount","apiUrl","apiKey","error","isLoading","onTextChange","e","val","target","value","name","fetch","then","response","ok","json","Error","data","hits","catch","onAmountChange","index","randomWords","require","className","onChange","floatingLabelText","fullWidth","primaryText","length","TabPanel","children","other","Typography","component","role","hidden","aria-labelledby","Box","p","a11yProps","LinkTab","Tab","event","preventDefault","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","NavTabs","classes","React","useState","setValue","AppBar","position","Tabs","variant","newValue","aria-label","href","App","Navbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f581589a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\n\n    state = {\n        open: false,\n        currentImg: ''\n    }\n\n    handleOpen = (img) => {\n        this.setState({ open: true, currentImg: img })\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n\n    render() {\n\n        let imageList;\n        const { images } = this.props;\n\n        if (images) {\n            imageList = (\n                <GridList cellHeight={220} cols={3} >\n                    {images.map(img => (\n                        <GridTile title={img.tags} key={img.id} subtitle={\n                            <span>by <strong>{img.user}</strong></span>}\n                            actionIcon={<IconButton onClick={() => this.handleOpen(img.largeImageURL)}><ZoomIn color=\"white\" /></IconButton>}>\n                            <img src={img.largeImageURL} alt={img.tags} />\n                        </GridTile>\n                    ))}\n                </GridList>\n            )\n        } else {\n            imageList = null\n        }\n\n        const actions = [\n            <FlatButton label=\"close\" primary={true} onClick={this.handleClose} />\n        ]\n\n        return <div>{imageList}\n            <Dialog actions={actions}\n                modal={false}\n                open={this.state.open}\n                onRequestCLose={this.state.close}>\n                <img src={this.state.currentImg} alt='' style={{ width: \"100%\" }} />\n            </Dialog>\n        </div>\n    }\n}\n\nImageResults.propTypes = {\n    images: PropTypes.array.isRequired\n}\n\nexport default ImageResults;\n","import React, { Component } from 'react';\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport ImageResults from '../ImageResults/ImageResults';\n\nclass Search extends Component {\n\n    state = {\n        searchText: '',\n        amount: 15,\n        apiUrl: 'https://pixabay.com/api',\n        apiKey: '15164621-e9e63a50c846d79421bd72c77',\n        images: [],\n        error: false,\n        isLoading: true\n    }\n\n    componentDidMount() {\n\n        const randomWords = require('random-words')\n        fetch(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${randomWords(1)[0]}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error('Something went wrong ...');\n                }\n            })\n            .then(data => this.setState({ images: data.hits, isLoading: false }))\n            .catch(error => this.setState({ error: true, isLoading: false }));\n    }\n\n    onTextChange = (e) => {\n        const val = e.target.value;\n        this.setState({ [e.target.name]: val }, () => {\n            if (val === '') { this.setState({ images: [] }) } else {\n                fetch(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n                    .then(response => {\n                        if (response.ok) {\n                            return response.json();\n                        } else {\n                            throw new Error('Something went wrong ...');\n                        }\n                    })\n                    .then(data => this.setState({ images: data.hits, isLoading: false }))\n                    .catch(error => this.setState({ error: true, isLoading: false }));\n            }\n        }\n        )\n    }\n\n    onAmountChange = (e, index, val) => {\n        this.setState({ amount: val }, () => {\n            if (this.state.searchText) {\n                fetch(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n                    .then(response => {\n                        if (response.ok) {\n                            return response.json();\n                        } else {\n                            throw new Error('Something went wrong ...');\n                        }\n                    })\n                    .then(data => this.setState({ images: data.hits, isLoading: false }))\n                    .catch(error => this.setState({ error: true, isLoading: false }))\n            }\n        })\n\n    }\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <TextField name=\"searchText\" value={this.state.searchText} onChange={this.onTextChange} floatingLabelText=\"search for images\" fullWidth={true} />\n                <br />\n                <SelectField name=\"amount\" floatingLabelText=\"Amount\" value={this.state.amount} onChange={this.onAmountChange}>\n                    <MenuItem value={5} primaryText=\"5\" />\n                    <MenuItem value={10} primaryText=\"10\" />\n                    <MenuItem value={15} primaryText=\"15\" />\n                    <MenuItem value={20} primaryText=\"20\" />\n                    <MenuItem value={25} primaryText=\"25\" />\n                </SelectField>\n                <br />\n                {this.state.images.length > 0 ? <ImageResults images={this.state.images} /> : null}\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Search from '../Search/Search';\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`nav-tabpanel-${index}`}\n      aria-labelledby={`nav-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `nav-tab-${index}`,\n    'aria-controls': `nav-tabpanel-${index}`,\n  };\n}\n\nfunction LinkTab(props) {\n  return (\n    <Tab\n      component=\"a\"\n      onClick={event => {\n        event.preventDefault();\n      }}\n      {...props}\n    />\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction NavTabs() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs variant=\"fullWidth\" value={value} onChange={handleChange} aria-label=\"nav tabs example\">\n          <LinkTab label=\"Pictures\" href=\"/\" {...a11yProps(0)} />\n          <LinkTab label=\"Movies\" href=\"/movies\" {...a11yProps(1)} />\n          <LinkTab label=\"Music\" href=\"/music\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n          <Search/>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n      </TabPanel>\n    </div>\n  );\n}\n\nexport default NavTabs\n","import React from 'react';\nimport Navbar from './Components/Navbar/Navbar';\n\nconst App = () => {\n  return (\n\n      <Navbar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport './main.css';\n\nReactDOM.render(<MuiThemeProvider><App /></MuiThemeProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}